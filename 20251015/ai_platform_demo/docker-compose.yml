version: "3.9"
x-env: &env { TZ: UTC }
networks: { core: {}, camunda: {} }

services:
  postgres:
    image: postgis/postgis:16-3.4
    environment:
      <<: *env
      POSTGRES_USER: ${POSTGRES_USER:-ai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ai}
      POSTGRES_DB: ${POSTGRES_DB:-ai_platform}
    ports: ["5432:5432"]
    volumes:
      - /Volumes/Seagate/WellsFargo/LowCodeAgent/20251015/ai_platform_data/postgres:/var/lib/postgresql/data
    networks: [core]

  redis:
    image: redis:7.2
    command: ["redis-server","--save","","--appendonly","no"]
    ports: ["6379:6379"]
    volumes:
      - /Volumes/Seagate/WellsFargo/LowCodeAgent/20251015/ai_platform_data/redis:/data
    networks: [core]

  arangodb:
    image: arangodb:3.11
    environment:
      <<: *env
      ARANGO_ROOT_PASSWORD: ${ARANGO_ROOT_PASSWORD:-rootpwd}
    ports: ["8529:8529"]
    volumes:
      - /Volumes/Seagate/WellsFargo/LowCodeAgent/20251015/ai_platform_data/arangodb:/var/lib/arangodb3
    networks: [core]

  chroma:
    image: chromadb/chroma:latest
    environment:
      <<: *env
      IS_PERSISTENT: "TRUE"
      PERSIST_DIRECTORY: /chroma-data
    ports: ["8000:8000"]
    volumes:
      - /Volumes/Seagate/WellsFargo/LowCodeAgent/20251015/ai_platform_data/chroma:/chroma-data
    networks: [core]

  meilisearch:
    image: getmeili/meilisearch:v1.8
    environment: { MEILI_NO_ANALYTICS: "true" }
    ports: ["7700:7700"]
    volumes:
      - /Volumes/Seagate/WellsFargo/LowCodeAgent/20251015/ai_platform_data/meili:/meili_data
    networks: [core]

  # Confluent Kafka (reliable tags)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports: ["2181:2181"]
    volumes:
      - /Volumes/Seagate/WellsFargo/LowCodeAgent/20251015/ai_platform_data/zookeeper:/var/lib/zookeeper
    networks: [core]

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on: [zookeeper]
    ports: ["9092:9092"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_HEAP_OPTS: "-Xms256m -Xmx512m"
    volumes:
      - /Volumes/Seagate/WellsFargo/LowCodeAgent/20251015/ai_platform_data/kafka:/var/lib/kafka/data
    networks: [core]

  langfuse:
    image: ghcr.io/langfuse/langfuse:latest
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-ai}:${POSTGRES_PASSWORD:-ai}@postgres:5432/${POSTGRES_DB:-ai_platform}
      NEXTAUTH_URL: ${LANGFUSE_NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${LANGFUSE_NEXTAUTH_SECRET:-devsecret}
      SALT: ${LANGFUSE_SALT:-langsalt}
      ENCRYPTION_KEY: ${LANGFUSE_ENCRYPTION_KEY:-00000000000000000000000000000000}
      TELEMETRY: "false"
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY:-public_dev}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY:-secret_dev}
    depends_on: [postgres]
    ports: ["3000:3000"]
    networks: [core]

  # Spring Boot Orchestrator (Gradle build below)
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-ai_platform}
      DB_USER: ${POSTGRES_USER:-ai}
      DB_PASS: ${POSTGRES_PASSWORD:-ai}
      REDIS_URL: redis://redis:6379
      KAFKA_BOOTSTRAP: kafka:9092
      ARANGO_URL: http://arangodb:8529
      ARANGO_USER: root
      ARANGO_PASS: ${ARANGO_ROOT_PASSWORD:-rootpwd}
      CHROMA_URL: http://chroma:8000
      MEILI_URL: http://meilisearch:7700
      LANGFUSE_BASEURL: http://langfuse:3000
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY:-public_dev}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY:-secret_dev}
    ports: ["8080:8080"]
    depends_on: [postgres, redis, kafka, arangodb, chroma, meilisearch, langfuse]
    networks: [core]

  # Node gateway for uploads + prompt assembly config
  nodeapi:
    image: node:20-alpine
    working_dir: /app
    command: sh -c "npm i && node index.js"
    environment:
      SPRING_BASE: http://server:8080
      CHROMA_URL: http://chroma:8000
      MEILI_URL: http://meilisearch:7700
      ARANGO_URL: http://arangodb:8529
      ARANGO_USER: root
      ARANGO_PASS: ${ARANGO_ROOT_PASSWORD:-rootpwd}
    ports: ["4000:4000"]
    volumes:
      - ./nodeapi:/app
      - /Volumes/Seagate/WellsFargo/LowCodeAgent/20251015/ai_platform_data:/data
    depends_on: [server]
    networks: [core]
